syntax = "proto3";

package com.sleepkqq.sololeveling.proto.player;

import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_package = "com.sleepkqq.sololeveling.proto.player";
option java_outer_classname = "PlayerProto";

service PlayerService {
  rpc getPlayerInfo (GetPlayerInfoRequest) returns (GetPlayerInfoResponse);
  rpc getCurrentTasks (GetCurrentTasksRequest) returns (GetCurrentTasksResponse);
}

// models
enum TaskRarity {
  COMMON = 0;
  UNCOMMON = 1;
  RARE = 2;
  EPIC = 3;
  LEGENDARY = 4;
}

enum TaskTopic {
  PHYSICAL_ACTIVITY = 0;
  MENTAL_HEALTH = 1;
  EDUCATION = 2;
  CREATIVITY = 3;
  SOCIAL_SKILLS = 4;
  HEALTHY_EATING = 5;
  PRODUCTIVITY = 6;
  EXPERIMENTS = 7;
  ECOLOGY = 8;
  TEAMWORK = 9;
}

message TaskInfo {
  string id = 1;
  string title = 2;
  string description = 3;
  int32 experience = 4;
  TaskRarity rarity = 5;
  repeated TaskTopic topic = 6;
  int32 agility = 7;
  int32 strength = 8;
  int32 intelligence = 9;
}

message LevelInfo {
  string id = 1;
  int32 level = 2;
  int32 totalExperience = 3;
  int32 currentExperience = 4;
  int32 experienceToNextLevel = 5;
  double coefficient = 6;
}

enum Assessment {
  S = 0;
  A = 1;
  B = 2;
  C = 3;
  D = 4;
  E = 5;
}

message PlayerTaskTopicInfo {
  string id = 1;
  repeated TaskTopic taskTopic = 2;
  Assessment assessment = 3;
  int32 completedTasksCount = 4;
  int32 skippedTasksCount = 5;
  LevelInfo levelInfo = 6;
}

message PlayerInfo {
  int64 id = 1;
  int32 maxTasks = 2;
  LevelInfo levelInfo = 3;
  repeated PlayerTaskTopicInfo playerTaskTopicInfo = 4;
}

enum PlayerTaskStatus {
  PREPARING = 0;
  IN_PROGRESS = 1;
  PENDING_COMPLETION = 2;
  COMPLETED = 3;
  SKIPPED = 4;
}

message PlayerTaskInfo {
  string id = 1;
  TaskInfo taskInfo = 2;
  PlayerTaskStatus status = 3;
  google.protobuf.Timestamp createdAt = 4;
  google.protobuf.Timestamp closedAt = 5;
}

// requests and responses
message GetPlayerInfoRequest {
  int64 playerId = 1;
}

message GetPlayerInfoResponse {
  PlayerInfo playerInfo = 1;
  bool success = 2;
}

message GetCurrentTasksRequest {
  int64 playerId = 1;
}

message GetCurrentTasksResponse {
  repeated PlayerTaskInfo currentTask = 1;
  bool success = 2;
}